{"ast":null,"code":"\"use strict\";\n\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Writer = void 0;\nclass Writer {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 256;\n    this.size = size;\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(size);\n  }\n  ensure(size) {\n    var remaining = this.buffer.length - this.offset;\n    if (remaining < size) {\n      var oldBuffer = this.buffer;\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n      this.buffer = Buffer.allocUnsafe(newSize);\n      oldBuffer.copy(this.buffer);\n    }\n  }\n  addInt32(num) {\n    this.ensure(4);\n    this.buffer[this.offset++] = num >>> 24 & 0xff;\n    this.buffer[this.offset++] = num >>> 16 & 0xff;\n    this.buffer[this.offset++] = num >>> 8 & 0xff;\n    this.buffer[this.offset++] = num >>> 0 & 0xff;\n    return this;\n  }\n  addInt16(num) {\n    this.ensure(2);\n    this.buffer[this.offset++] = num >>> 8 & 0xff;\n    this.buffer[this.offset++] = num >>> 0 & 0xff;\n    return this;\n  }\n  addCString(string) {\n    if (!string) {\n      this.ensure(1);\n    } else {\n      var len = Buffer.byteLength(string);\n      this.ensure(len + 1); // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8');\n      this.offset += len;\n    }\n    this.buffer[this.offset++] = 0; // null terminator\n    return this;\n  }\n  addString() {\n    let string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var len = Buffer.byteLength(string);\n    this.ensure(len);\n    this.buffer.write(string, this.offset);\n    this.offset += len;\n    return this;\n  }\n  add(otherBuffer) {\n    this.ensure(otherBuffer.length);\n    otherBuffer.copy(this.buffer, this.offset);\n    this.offset += otherBuffer.length;\n    return this;\n  }\n  join(code) {\n    if (code) {\n      this.buffer[this.headerPosition] = code;\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1);\n      this.buffer.writeInt32BE(length, this.headerPosition + 1);\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset);\n  }\n  flush(code) {\n    var result = this.join(code);\n    this.offset = 5;\n    this.headerPosition = 0;\n    this.buffer = Buffer.allocUnsafe(this.size);\n    return result;\n  }\n}\nexports.Writer = Writer;","map":{"version":3,"mappings":"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","names":["Writer","constructor","size","buffer","Buffer","allocUnsafe","ensure","remaining","length","offset","oldBuffer","newSize","copy","addInt32","num","addInt16","addCString","string","len","byteLength","write","addString","add","otherBuffer","join","code","headerPosition","writeInt32BE","slice","flush","result","exports"],"sources":["/Users/harshithadhulipala/Desktop/CSCE_315_Project3/node_modules/pg-protocol/src/buffer-writer.ts"],"sourcesContent":["//binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nexport class Writer {\n  private buffer: Buffer\n  private offset: number = 5\n  private headerPosition: number = 0\n  constructor(private size = 256) {\n    this.buffer = Buffer.allocUnsafe(size)\n  }\n\n  private ensure(size: number): void {\n    var remaining = this.buffer.length - this.offset\n    if (remaining < size) {\n      var oldBuffer = this.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size\n      this.buffer = Buffer.allocUnsafe(newSize)\n      oldBuffer.copy(this.buffer)\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.ensure(4)\n    this.buffer[this.offset++] = (num >>> 24) & 0xff\n    this.buffer[this.offset++] = (num >>> 16) & 0xff\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.ensure(2)\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (!string) {\n      this.ensure(1)\n    } else {\n      var len = Buffer.byteLength(string)\n      this.ensure(len + 1) // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8')\n      this.offset += len\n    }\n\n    this.buffer[this.offset++] = 0 // null terminator\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    var len = Buffer.byteLength(string)\n    this.ensure(len)\n    this.buffer.write(string, this.offset)\n    this.offset += len\n    return this\n  }\n\n  public add(otherBuffer: Buffer): Writer {\n    this.ensure(otherBuffer.length)\n    otherBuffer.copy(this.buffer, this.offset)\n    this.offset += otherBuffer.length\n    return this\n  }\n\n  private join(code?: number): Buffer {\n    if (code) {\n      this.buffer[this.headerPosition] = code\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1)\n      this.buffer.writeInt32BE(length, this.headerPosition + 1)\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset)\n  }\n\n  public flush(code?: number): Buffer {\n    var result = this.join(code)\n    this.offset = 5\n    this.headerPosition = 0\n    this.buffer = Buffer.allocUnsafe(this.size)\n    return result\n  }\n}\n"]},"metadata":{},"sourceType":"script"}